#! /bin/bash
# @author jonas.eberle@aero.de / flightvision@googlemail.com
# @param -n not really (make no filesystem changes)
# @param confPath path to backup_hardlink.conf
# deletes backups if they are older than MAX_AGE or have a smaller delta to both the preceding and the coming backup
# makes use of nice/ionice/screen on the target system if available to reduce resource usage and disconnect from running cleanup jobs
echo "---------------------------------------------------------"
echo "$0 --- $(date -Is -u)"

confPath="$(dirname $0)/$(basename $0 _cleaner).conf"
notReally=false
isVerbose=0

while test $# -gt 0
do
    case "$1" in
        -n)
		echo "not really: no filesystem changes will be done."
		notReally=true
	;;
        *) 
		confPath="$1"
	;;
    esac
    shift
done



printf "Reading configuration from '%s'.\n" "$confPath"
if ! . "$confPath"; then 
	exit 1
fi


# @var $1... commandline
# ' needs to be escaped

# do something that does not change the filesystem
execute () {
	local _quiet=false
	if [ "$1" == "--quiet" ]; then
	    _quiet=true
	    shift
	fi
	local DO="${BACKUP_CONSOLE_PREFIX} $@"

	if ! $_quiet; then
	    echo "   $DO"
	fi
	RES=$(eval "$DO")
}

# do filesystem changes
executeChanges () {
	local _quiet=false
	if [ "$1" == "--quiet" ]; then
	    _quiet=true
	    shift
	fi

	local DO="${BACKUP_CONSOLE_PREFIX} $@"

	if ! $_quiet; then
		echo "        $DO"
	fi
	
	if $notReally; then
		echo "          <- not executed due to the -n switch."
	else
		eval "$DO"
	fi
}




# check for needed programs
_remoteProgs=(ls rm grep tr date sh)
printf "Checking availability of '%s' in environment '%s'...\n" "${_remoteProgs[*]}" "$BACKUP_CONSOLE_PREFIX"
for prog in ${_remoteProgs[*]}; do
	if ! $BACKUP_CONSOLE_PREFIX type $prog &> /dev/null; then
		printf "Program '%s' in environment '%s' not in search path.\n" "$prog" "$BACKUP_CONSOLE_PREFIX"
		exit 1
	fi
done

# check for optional programs
_remoteProgs=(nice)
printf "Checking availability of '%s' in environment '%s'...\n" "${_remoteProgs[*]}" "$BACKUP_CONSOLE_PREFIX"
for prog in ${_remoteProgs[*]}; do
	if ! $BACKUP_CONSOLE_PREFIX type $prog &> /dev/null; then
		printf "Optional program '%s' in environment '%s' not in search path.\n" "$prog" "$BACKUP_CONSOLE_PREFIX"
		_nice=""		
	else
		_nice="nice "		
	fi
done

_remoteProgs=(ionice)
printf "Checking availability of '%s' in environment '%s'...\n" "${_remoteProgs[*]}" "$BACKUP_CONSOLE_PREFIX"
for prog in ${_remoteProgs[*]}; do
	if ! $BACKUP_CONSOLE_PREFIX type $prog &> /dev/null; then
		printf "Optional program '%s' in environment '%s' not in search path.\n" "$prog" "$BACKUP_CONSOLE_PREFIX"
		_ionice=""		
	else
		_ionice="ionice -c3 "
	fi
done

_remoteProgs=(screen)
printf "Checking availability of '%s' in environment '%s'...\n" "${_remoteProgs[*]}" "$BACKUP_CONSOLE_PREFIX"
for prog in ${_remoteProgs[*]}; do
	if ! $BACKUP_CONSOLE_PREFIX type $prog &> /dev/null; then
		printf "Optional program '%s' in environment '%s' not in search path.\n" "$prog" "$BACKUP_CONSOLE_PREFIX"
		_screen=""		
	else
		_screen="screen -d -m "		
	fi
done


for DIR in ${LOCAL_DIRS[*]}; do
	remoteRootdir=${BACKUP_DIR}$(echo ${DIR} | tr -s '/' '_')/
	echo "$remoteRootdir"

	# clean -wip-del - directories (all)
	
	echo "   looking for backups marked for deletion..."
	execute "ls $remoteRootdir 2> /dev/null | grep -E '\-wip\-del$'"
	remoteDirs=( "${RES[@]}" )

	for remoteDir in ${remoteDirs[*]}; do
		echo '     ' $remoteDir ' will be deleted'
		screenCmds+=("$_ionice${_nice}rm -rf ${remoteRootdir}${remoteDir};")
	done
	# clean -wip - directories (all but last if it is in progroess)
	echo "   looking for unfinished backups..."
	execute "ls $remoteRootdir 2> /dev/null | sed \\\$d | grep -E '\-wip$'" # all but last
    	remoteDirs=( "${RES[@]}" )
	for remoteDir in ${remoteDirs[*]}; do
		echo '     ' $remoteDir ' will be deleted'
		screenCmds+=("$_ionice${_nice}rm -rf ${remoteRootdir}${remoteDir};")
	done


	# delete backups older than MAX_AGE_d days
	if [ -n "$MAX_AGE_d" ]; then		
		echo "   checking for backups older than $MAX_AGE_d days..."
		execute "ls -r $remoteRootdir 2> /dev/null | grep -Ev '\-(wip|wip-del)$'"
		remoteDirs=( $RES )
		# remove the newest backup so that it will never get deleted
	        echo "    I will preserve the newest," ${remoteDirs[0]}
		unset remoteDirs[0]


		execute --quiet date -u +%s
		nowS=$RES
		# conversion to seconds
		maxAgeS=$(expr $MAX_AGE_d '*' 86400)
		for remoteDir in ${remoteDirs[*]}; do
			remoteDirS=$(date -u --date="$(echo $remoteDir | tr -s '_' ' ')" +%s)
			deltaS=$(expr $nowS - $remoteDirS)
			if [ "$deltaS" -gt "$maxAgeS" ]; then
				echo "      $remoteDir"
				echo '        -> will be deleted'
				executeChanges "mv ${remoteRootdir}${remoteDir} ${remoteRootdir}${remoteDir}-wip-del"
				screenCmds+=("$_ionice${_nice}rm -rf ${remoteRootdir}${remoteDir}-wip-del;")
			fi
		done
	fi
	echo '   gathering backups...'
	execute "ls -r $remoteRootdir 2> /dev/null | grep -Ev '\-(wip|wip-del)$'"
	remoteDirs=( $RES )

	# remove the oldest backup so that it will never get deleted
	echo "    I will preserve the oldest," ${remoteDirs[-1]}
	unset 'remoteDirs[${#remoteDirs[@]}-1]'
	
	intervalS=$INTERVAL_INITIAL_s
	execute --quiet date -u +%s
	targetS=$RES

	# testing: check reactions in the future
	#targetS=$(expr $targetS + 10 \* 24 \* 60 \* 60)

	remoteDirS_=$targetS
	for i_remoteDir in ${!remoteDirs[@]}; do
		remoteDir=${remoteDirs[$i_remoteDir]}
		remoteDirNext=${remoteDirs[$(expr $i_remoteDir + 1 )]}

				# testing:
		#mkdir -p /tmp/$remoteRootdir/$remoteDir
	
		remoteDirS=$(date -u --date="$(echo $remoteDir | tr -s '_' ' ')" +%s)
		deltaS=$(expr $remoteDirS_ - $remoteDirS)

		if [ -n "$remoteDirNext" ]; then 
		    remoteDirNextS=$(date -u --date="$(echo $remoteDirNext | tr -s '_' ' ')" +%s)
		    deltaNextS=$(expr $remoteDirS - "$remoteDirNextS")
		else
		    # fake a high enough value
		    deltaNextS=$intervalS
		fi


		# get TARGET that is 1 step newer than the next backup
		targetS_=$targetS
		intervalS_=$intervalS
		while [ $targetS -gt $remoteDirS ]; do
			targetS_=$targetS
			intervalS_=$intervalS
			intervalS=$(expr $intervalS \* $INTERVAL_MULTI / 100)
			targetS=$(expr $targetS - $intervalS)
			echo "    target interval:$(expr $intervalS / 60 / 60)h   target:$(date -u --date=@$targetS $DATE_FMT)"
		done		
		targetS=$targetS_ # go back 1 step
		intervalS=$intervalS_ # go back 1 step


		echo "       backup:$remoteDir   delta to last:$(expr $deltaS / 60 / 60)h   to next: $(expr $deltaNextS / 60 / 60)h"
		

		# check DELTA to next remoteDirS and compare with intervalS
		if [ $targetS -lt $remoteDirS ] && [ $deltaNextS -lt $intervalS ]; then
			echo '           -> will be deleted'
			executeChanges "mv ${remoteRootdir}${remoteDir} ${remoteRootdir}${remoteDir}-wip-del"

			screenCmds+=("$_ionice${_nice}rm -rf ${remoteRootdir}${remoteDir}-wip-del;")

			continue
		fi

		remoteDirS_=$remoteDirS

		intervalS=$(expr $intervalS \* $INTERVAL_MULTI / 100)
		targetS=$(expr $targetS - $intervalS)
	done
done


# execute all deletions in a forked process

if [ "${#screenCmds[@]}" -gt 0 ]; then
	echo "sending all deletions to remote server..."
	#if [ -n "${BACKUP_CONSOLE_PREFIX}" ]; then
	    executeChanges ${_screen}sh -c \"${screenCmds[@]}\"
	#else
	#    ${_screen}sh -c "${screenCmds[@]}"
	#fi
fi

# TODO: http://stackoverflow.com/questions/285015/linux-prevent-a-background-process-from-being-stopped-after-closing-ssh-client
# TODO: checkout double forking instead of screen: ((exec sleep 30)&)

exit 0
